import streamlit as st

st.markdown(
    f"""
    <div style="display:inline-flex; gap:6px; font-size:20px; cursor:pointer;">
        <span onclick="fetch('/?_fb=up_{msg_id}')">üëç</span>
        <span onclick="fetch('/?_fb=down_{msg_id}')">üëé</span>
    </div>
    """,
    unsafe_allow_html=True
)

# ===== CSS: chat bubbles =====
st.markdown(
    """
    <style>
    /* Optional: tighten default chat message padding */
    [data-testid="stChatMessage"] { padding: 0.25rem 0; }

    /* Shared bubble style */
    .bubble {
        display: block;              /* so auto margins work */
        max-width: 75%;
        padding: 10px 14px;
        border-radius: 16px;
        word-wrap: break-word;
        line-height: 1.35;
        font-size: 16px;
        box-shadow: 0 1px 2px rgba(0,0,0,.06);
    }

    /* Assistant (left) */
    .bubble.bot {
        background: #E8EAF6;
        color: #111;
        margin-right: auto;          /* left align */
        border-top-left-radius: 6px; /* speechy corner */
    }

    /* You / self (right) */
    .bubble.user {
        background: #DCF8C6;
        color: #111;
        margin-left: auto;           /* right align */
        text-align: left;            /* keep text left inside bubble */
        border-top-right-radius: 6px;
    }
    </style>
    """,
    unsafe_allow_html=True
)

# ===== Example render with st.chat_message =====
messages = [
    {"role": "assistant", "content": "Hello! How can I help you today?"},
    {"role": "user", "content": "Make my self messages look like right-aligned bubbles."},
    {"role": "assistant", "content": "Done! Your messages now align to the right."},
]

for m in messages:
    with st.chat_message(m["role"], avatar="ü§ñ" if m["role"]=="assistant" else "üßë"):
        # Wrap the content in our bubble div
        klass = "bot" if m["role"] == "assistant" else "user"
        st.markdown(f'<div class="bubble {klass}">{m["content"]}</div>', unsafe_allow_html=True)


st.markdown("""
<style>
/* Tiny, horizontal feedback row */
.feedback-tight {
  display: inline-flex;         /* make children sit in a row */
  align-items: center;
  gap: 6px;                     /* control the gap here */
  margin-top: 6px;
}

/* Make Streamlit buttons shrink to content */
.feedback-tight .stButton { margin: 0 !important; }
.feedback-tight .stButton > button {
  width: auto !important;       /* no full-width buttons */
  min-width: 0 !important;
  padding: 2px 10px !important; /* compact paddings */
  border-radius: 10px;          /* nice little pills */
}
</style>
""", unsafe_allow_html=True)



with st.chat_message("assistant"):
    st.markdown(f'<div class="bubble assistant">{reply_html}</div>', unsafe_allow_html=True)

    # Feedback buttons side-by-side with tiny gap
    with st.container():
        st.markdown('<div class="feedback-tight">', unsafe_allow_html=True)
        up = st.button("üëç", key=f"fb_up_{msg_id}", help="Helpful")
        down = st.button("üëé", key=f"fb_down_{msg_id}", help="Not helpful")
        st.markdown('</div>', unsafe_allow_html=True)

    if up:
        st.session_state.feedback[msg_id] = "up"
        st.rerun()
    if down:
        st.session_state.feedback[msg_id] = "down"
        st.rerun()
