import sys
import os
import logging
import json

# Add the parent directory to Python path
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Force Thin Mode - no Oracle Client required
import oracledb
oracledb.init_oracle_client(lib_dir=None)  # This forces Thin Mode

from config.settings import DatabaseConfig

logger = logging.getLogger(__name__)

class OracleSetup:
    def __init__(self):
        # Use Thin Mode connection parameters
        self.connection_params = {
            "user": DatabaseConfig.ORACLE_USER,
            "password": DatabaseConfig.ORACLE_PASSWORD,
            "dsn": DatabaseConfig.ORACLE_DSN
        }
    
    def test_connection(self):
        """Test connection to Oracle Cloud Database"""
        try:
            print("Testing Oracle Cloud connection (Thin Mode)...")
            
            # Test connection with Thin Mode
            connection = oracledb.connect(**self.connection_params)
            cursor = connection.cursor()
            cursor.execute("SELECT 'Oracle Connection Successful' FROM DUAL")
            result = cursor.fetchone()
            connection.close()
            
            logger.info("Oracle Cloud connection successful")
            return True, f"Connected to Oracle Cloud: {result[0]}"
            
        except oracledb.Error as e:
            error_msg = f"Oracle connection failed: {str(e)}"
            logger.error(error_msg)
            return False, error_msg
        except Exception as e:
            error_msg = f"Unexpected error: {str(e)}"
            logger.error(error_msg)
            return False, error_msg
    
    def create_hr_schema(self):
        """Create HR database schema in Oracle"""
        try:
            connection = oracledb.connect(**self.connection_params)
            cursor = connection.cursor()
            
            # Create employees table
            cursor.execute("""
                BEGIN
                    EXECUTE IMMEDIATE 'CREATE TABLE employees (
                        employee_id NUMBER PRIMARY KEY,
                        first_name VARCHAR2(50) NOT NULL,
                        last_name VARCHAR2(50) NOT NULL,
                        email VARCHAR2(100) UNIQUE,
                        department VARCHAR2(50),
                        position VARCHAR2(50),
                        salary NUMBER(10,2),
                        hire_date DATE,
                        manager_id NUMBER,
                        status VARCHAR2(20) DEFAULT ''Active''
                    )';
                EXCEPTION
                    WHEN OTHERS THEN
                        IF SQLCODE != -955 THEN -- table already exists
                            RAISE;
                        END IF;
                END;
            """)
            
            # Create departments table
            cursor.execute("""
                BEGIN
                    EXECUTE IMMEDIATE 'CREATE TABLE departments (
                        department_id NUMBER PRIMARY KEY,
                        department_name VARCHAR2(50) NOT NULL,
                        manager_id NUMBER,
                        location VARCHAR2(100)
                    )';
                EXCEPTION
                    WHEN OTHERS THEN
                        IF SQLCODE != -955 THEN
                            RAISE;
                        END IF;
                END;
            """)
            
            # Insert sample departments
            departments = [
                (10, 'Engineering', 101, 'Building A'),
                (20, 'Maintenance', 102, 'Building B'),
                (30, 'Operations', 103, 'Building C'),
                (40, 'Quality Control', 104, 'Building D')
            ]
            
            for dept in departments:
                cursor.execute("""
                    MERGE INTO departments d
                    USING (SELECT :1 as department_id FROM DUAL) src
                    ON (d.department_id = src.department_id)
                    WHEN NOT MATCHED THEN
                        INSERT (department_id, department_name, manager_id, location)
                        VALUES (:1, :2, :3, :4)
                """, dept)
            
            # Insert sample employees
            employees = [
                (101, 'John', 'Smith', 'john.smith@company.com', 'Engineering', 'Engineering Manager', 85000, '2020-01-15', None),
                (102, 'Sarah', 'Johnson', 'sarah.johnson@company.com', 'Maintenance', 'Maintenance Manager', 78000, '2019-03-20', None),
                (103, 'Mike', 'Davis', 'mike.davis@company.com', 'Operations', 'Operations Manager', 82000, '2018-06-10', None),
                (104, 'Lisa', 'Chen', 'lisa.chen@company.com', 'Quality Control', 'QC Manager', 79000, '2021-02-14', None),
                (201, 'Tom', 'Wilson', 'tom.wilson@company.com', 'Engineering', 'Senior Engineer', 65000, '2021-07-01', 101),
                (202, 'Emily', 'Brown', 'emily.brown@company.com', 'Maintenance', 'Technician', 55000, '2022-01-10', 102),
                (203, 'David', 'Lee', 'david.lee@company.com', 'Operations', 'Operator', 52000, '2022-03-15', 103),
                (204, 'Maria', 'Garcia', 'maria.garcia@company.com', 'Quality Control', 'Inspector', 53000, '2021-11-20', 104)
            ]
            
            for emp in employees:
                cursor.execute("""
                    MERGE INTO employees e
                    USING (SELECT :1 as employee_id FROM DUAL) src
                    ON (e.employee_id = src.employee_id)
                    WHEN NOT MATCHED THEN
                        INSERT (employee_id, first_name, last_name, email, department, position, salary, hire_date, manager_id)
                        VALUES (:1, :2, :3, :4, :5, :6, :7, TO_DATE(:8, 'YYYY-MM-DD'), :9)
                """, emp)
            
            connection.commit()
            connection.close()
            logger.info("Oracle HR schema created successfully")
            return True
            
        except Exception as e:
            logger.error(f"Failed to create Oracle HR schema: {str(e)}")
            return False

if __name__ == "__main__":
    # Check if Oracle credentials are provided
    if DatabaseConfig.ORACLE_USER == "your_oracle_username" or DatabaseConfig.ORACLE_PASSWORD == "your_oracle_password":
        print("⚠️  Oracle credentials not configured. Using SQL Server as primary database.")
        print("To use Oracle Cloud, update your .env file with actual credentials.")
        success, message = False, "Oracle credentials not configured"
    else:
        setup = OracleSetup()
        success, message = setup.test_connection()
    
    print(f"Oracle Connection Test: {success} - {message}")
    
    if success:
        schema_created = setup.create_hr_schema()
        print(f"Oracle Schema creation: {'Success' if schema_created else 'Failed'}")
